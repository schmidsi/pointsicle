// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class PointsicleCampaign extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PointsicleCampaign entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PointsicleCampaign must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PointsicleCampaign", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PointsicleCampaign | null {
    return changetype<PointsicleCampaign | null>(
      store.get_in_block("PointsicleCampaign", id),
    );
  }

  static load(id: string): PointsicleCampaign | null {
    return changetype<PointsicleCampaign | null>(
      store.get("PointsicleCampaign", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get displayName(): string | null {
    let value = this.get("displayName");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set displayName(value: string | null) {
    if (!value) {
      this.unset("displayName");
    } else {
      this.set("displayName", Value.fromString(<string>value));
    }
  }
}

export class PointsicleUser extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PointsicleUser entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type PointsicleUser must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PointsicleUser", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): PointsicleUser | null {
    return changetype<PointsicleUser | null>(
      store.get_in_block("PointsicleUser", id.toHexString()),
    );
  }

  static load(id: Bytes): PointsicleUser | null {
    return changetype<PointsicleUser | null>(
      store.get("PointsicleUser", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get questParticipations(): QuestParticipationLoader {
    return new QuestParticipationLoader(
      "PointsicleUser",
      this.get("id")!.toBytes().toHexString(),
      "questParticipations",
    );
  }

  get points(): BigInt {
    let value = this.get("points");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set points(value: BigInt) {
    this.set("points", Value.fromBigInt(value));
  }

  get lastUpdated(): BigInt {
    let value = this.get("lastUpdated");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastUpdated(value: BigInt) {
    this.set("lastUpdated", Value.fromBigInt(value));
  }
}

export class QuestParticipation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save QuestParticipation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type QuestParticipation must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("QuestParticipation", id.toString(), this);
    }
  }

  static loadInBlock(id: string): QuestParticipation | null {
    return changetype<QuestParticipation | null>(
      store.get_in_block("QuestParticipation", id),
    );
  }

  static load(id: string): QuestParticipation | null {
    return changetype<QuestParticipation | null>(
      store.get("QuestParticipation", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get quest(): string {
    let value = this.get("quest");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set quest(value: string) {
    this.set("quest", Value.fromString(value));
  }

  get participant(): Bytes {
    let value = this.get("participant");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set participant(value: Bytes) {
    this.set("participant", Value.fromBytes(value));
  }
}

export class Quest extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Quest entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Quest must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Quest", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Quest | null {
    return changetype<Quest | null>(store.get_in_block("Quest", id));
  }

  static load(id: string): Quest | null {
    return changetype<Quest | null>(store.get("Quest", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get points(): BigInt {
    let value = this.get("points");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set points(value: BigInt) {
    this.set("points", Value.fromBigInt(value));
  }

  get campaign(): string {
    let value = this.get("campaign");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set campaign(value: string) {
    this.set("campaign", Value.fromString(value));
  }
}

export class QuestParticipationLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): QuestParticipation[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<QuestParticipation[]>(value);
  }
}
